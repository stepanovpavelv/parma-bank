version: "3.9"

services:
  #AUTH
  auth_front:
    container_name: money_auth_front
    image: money_auth_front
    build:
      context: .
      dockerfile: auth-front/Dockerfile
    ports:
      - "4200:80"
    networks:
      - banking_network

  auth_db:
    container_name: money_auth_db
    image: debezium/postgres:12
    environment:
      POSTGRES_USER: auth_sa
      POSTGRES_PASSWORD: sa123
      POSTGRES_DB: bank_auth
    ports:
      - "5434:5434"
    expose:
      - "5434"
    networks:
      - banking_network
    depends_on:
      - auth_front
    command:
      - "-p 5434"

  auth:
    container_name: auth_app
    #image: docker-spring-boot-postgres:latest
    build:
      context: .
      dockerfile: auth/context/app/Dockerfile
    ports:
      - "8082:8082"
    networks:
      - banking_network
    depends_on:
      - auth_db
    environment:
      - TZ=UTC
      #- SPRING_DATASOURCE_URL=jdbc:postgresql://auth_db:5434/bank_auth
      #- SPRING_DATASOURCE_USERNAME=auth_sa
      #- SPRING_DATASOURCE_PASSWORD=sa123
      #- SPRING_JPA_HIBERNATE_DDL_AUTO=update

  #MONEY TRANSFER
  transfer_db:
    container_name: money_transfer_db
    image: debezium/postgres:12
    environment:
      POSTGRES_USER: money_transfer_sa
      POSTGRES_PASSWORD: sa123
      POSTGRES_DB: bank_money_transfer
    ports:
      - "5432:5432"
    networks:
      - banking_network
    depends_on:
      - auth
    command:
      - "postgres"
      - "-c"
      - "wal_level=logical"
    volumes:
      - ./money_transfer/context/database/init.sql:/docker-entrypoint-initdb.d/db.sql

  money_transfer_main:
    container_name: money_transfer_app_main
    #image: docker-spring-boot-postgres:latest
    build:
      context: .
      dockerfile: money_transfer/context/app/Dockerfile
    ports:
      - "8080:8080"
    networks:
      - banking_network
    depends_on:
      - transfer_db
    environment:
      - TZ=UTC
      - SPRING_BALANCING_SECRET=main_app
      #- SPRING_DATASOURCE_URL=jdbc:postgresql://transfer_db:5432/bank_money_transfer
      #- SPRING_DATASOURCE_USERNAME=money_transfer_sa
      #- SPRING_DATASOURCE_PASSWORD=sa123
      #- SPRING_JPA_HIBERNATE_DDL_AUTO=update

  money_transfer_repl:
    container_name: money_transfer_app_replica
    build:
      context: .
      dockerfile: money_transfer/context/app/Dockerfile
    ports:
      - "8079:8080"
    networks:
      - banking_network
    depends_on:
      - transfer_db
    environment:
      - TZ=UTC
      - SPRING_BALANCING_SECRET=replica_app

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - banking_network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - banking_network
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop:latest
    ports:
      - "9000:9000"
    depends_on:
      - kafka
    networks:
      - banking_network
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      JVM_OPTS: -Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify

  kafkaconnect:
    container_name: kafkaconnect
    image: debezium/connect-jdbc:2.0
    build:
      context: .
      dockerfile: money_transfer/context/kafka-connect/Dockerfile
    depends_on:
      - kafka
    ports:
      - "8083:8083"
    networks:
      - banking_network
    environment:
      GROUP_ID: 1
      BOOTSTRAP_SERVERS: kafka:29092
      CONFIG_STORAGE_TOPIC: my_connect_configs
      OFFSET_STORAGE_TOPIC: my_connect_offsets
      STATUS_STORAGE_TOPIC: my_connect_statuses
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter

  #REPORTING
  report_db:
    container_name: money_report_db
    image: debezium/postgres:12
    environment:
      POSTGRES_USER: reporting_sa
      POSTGRES_PASSWORD: sa123
      POSTGRES_DB: bank_reports
    ports:
      - "5433:5433"
    expose:
      - "5433"
    networks:
      - banking_network
    depends_on:
      - auth
    command:
      - "-p 5433"

  report_app:
    container_name: money_report_app
    #image: docker-spring-boot-postgres:latest
    build:
      context: .
      dockerfile: reporting/context/app/Dockerfile
    ports:
      - "8081:8081"
    networks:
      - banking_network
    depends_on:
      - report_db
    environment:
      - TZ=UTC
      #- SPRING_DATASOURCE_URL=jdbc:postgresql://report_db:5433/bank_reports
      #- SPRING_DATASOURCE_USERNAME=reporting_sa
      #- SPRING_DATASOURCE_PASSWORD=sa123
      #- SPRING_JPA_HIBERNATE_DDL_AUTO=update

  pgadmin:
    container_name: pgadmin4
    image: dpage/pgadmin4:latest
    restart: always
    ports:
      - "5050:80"
    networks:
      - banking_network
    depends_on:
      - auth_db
      - transfer_db
      - report_db
    environment:
      PGADMIN_DEFAULT_EMAIL: edu@parma.ru
      PGADMIN_DEFAULT_PASSWORD: admin

  #BALANCER (demo)
  load_balancer_transfer:
    container_name: nginx_balancer
    build:
      context: .
      dockerfile: load-balancer/context/Dockerfile
    ports:
      - "9090:9090"
    networks:
      - banking_network
    depends_on:
      - money_transfer_main
      - money_transfer_repl

networks:
  banking_network:
    name: banking_bridge